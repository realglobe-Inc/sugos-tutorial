# {{prefix}} {{{cur.name}}}

This tutorial shows most simple example with SUGOS. Define a function on actor, then call it from caller.
(You can learn about actors/callas in [Previous Tutorial]({{{prev.url}}}))

<a href="{{{cur.url}}}">
  <img src="{{{imgDir}}}/eyecatch-hello-world.jpg"
       alt="eyecatch"
       height="{{eyecatchHeight}}"
       style="height:{{eyecatchHeight}}px"
/></a>

{{#if toc}}
## {{{tocTitle}}}
{{{toc}}}
{{/if}}


## Before Starting

SUGOS runs on Node.js. Prepare the environment with [nvm]({{{links.nvm}}})

+ [Node.js {{{pkg.engines.node}}}]({{{links.node}}})
+ [npm {{{pkg.engines.npm}}}]({{{links.npm}}})

<a href="{{{links.node}}}">
  <img src="{{{imgDir}}}/nodejs-banner.png"
       alt="banner"
       height="{{bannerHeight}}"
       style="height:{{bannerHeight}}px"
  /></a>
<a href="{{{links.npm}}}">
  <img src="{{{imgDir}}}/npm-banner.png"
       alt="banner"
       height="{{bannerHeight}}"
       style="height:{{bannerHeight}}px"
  /></a>

## Play it

### Prepare Project

Make directory for the project

```bash
{{{read 'example/tutorial-01/init-project.sh'}}}
```

Then install dependencies.

```bash
{{{read 'example/tutorial-01/install-deps.sh'}}}
```

### Running Hub Server

Run a [SUGO-Hub]({{{links.sugo-hub}}}) server to interchange commands.

Write a script like:

**hub.js**
```javascript
{{{read 'example/tutorial-01/hub.js'}}}
```

Then, execute it with node.

```bash
{{{read 'example/tutorial-01/run-hub.sh'}}}
```

You may get warning to use Redis server for performance, but just ignore it for now.


### Declaring a Module

Declare a module, bundle of functions, to connect actor.
For this example, define simple one which have ping function to return pong.

**modules/table-tennis.js**
```javascript
{{{read 'example/tutorial-01/modules/table-tennis.js'}}}
```

The declared functions are shared to callers via actor.

Not that the functions returns [Promise]({{{links.promise}}}). This make it easy to handle async procedures.
And this example use [co]({{{links.co}}}) packages for promise flow controlling.


### Set the module onto actor and Connect to Hub

Moduleが用意できたら、それを[SUGO-Actor]({{{links.sugo-actor}}})に載せます。

接続先となるHubのhost名と、自身の識別子となる`key`項目、使うモジュールを渡してActorインスタンスを生成します。

**actor.js**
```javascript
{{{read 'example/tutorial-01/actor.js'}}}
```

Actorのスクリプトが用意できたらそれを実行してHubにつなぎます。

```bash
{{{read 'example/tutorial-01/run-actor.sh'}}}
```


### Callerから呼び出す

Callerからは`.connect()`メソッドに、keyを指定することで特定のActorに接続することができます。
先ほど宣言した"my-actor-01"をkeyとて渡し、そこから'tableTennis'にアクセスします。

**caller.js**
```javascript
{{{read 'example/tutorial-01/caller.js'}}}
```

このスクリプトを実行し、無事pongが帰ってきたら成功です。

```bash
{{{read 'example/tutorial-01/run-caller.sh'}}}
```

## まとめ

+ Hub / Actor / Callerの三つで最小構成となる
+ Actorはkeyによって判別される
+ Actor側で宣言された関数はCaller側で使えるようになる
+ Callerから呼び出した実行結果はPromiseで返ってくる

なお、今回出てきたSnippetは、[こちら]({{{links.tutorial-01-example}}})からも入手できます


## おまけ

### 雑談: standard JSを使ってコーディング標準化する

今回でてきたスクリプトを含め、SUGOSチームではコーディング規約として[standard JS]({{{links.standard-js}}})を採用しています。
これはソースコードの中で「インテンドをいくつにするか」、「セミコロンをどうするか」などのルールを規程し、チェックするものです。

以前はチーム内のメンバが異なるエディタを使っているため、フォーマッタによって毎度Gitの差分が出てしまうという問題が生じていました。
standard JSでは

+ ルールが徹底している
+ 個別の設定がいらない
+ 様々なエディタに対応している

という利点があり、現在ではチーム標準となりました。オススメです。

<a href="https://github.com/feross/standard">
  <img src="{{{imgDir}}}/standard-js-banner.png"
       alt="banner"
       height="{{bannerHeight}}"
       style="height:{{bannerHeight}}px"
  /></a>


## これも読みたい

+ 前回: [{{{prev.name}}}]({{{prev.url}}})
+ 次回: [{{{next.name}}}]({{{next.url}}})

## リンク

+ [SUGOS]({{{links.sugos}}})
+ [SUGO-Hub]({{{links.sugo-hub}}})
+ [SUGO-Actor]({{{links.sugo-actor}}})
+ [SUGO-Caller]({{{links.sugo-caller}}})
+ Tutorials
{{#each markdowns}}
  + [{{{name}}}]({{{url}}})
{{/each}}