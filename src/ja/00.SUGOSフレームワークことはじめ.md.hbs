# 【SUGOS】チュートリアル001: SUGOSことはじめ


## これはなにか

[SUGOS]({{{links.sugos}}})とは

+ High-levelなRPC(Remote Procedure Call)フレームワーク
+ Module定義を動的に共有することで、ネットワーク透過的な関数呼び出しを実現する
+ 主に[Node.js]({{{links.node}}})で実装されている
+ [EventEmitter]({{{links.eventemitter}}})形式による双方向通信をサポート
+ [株式会社リアルグローブ]({{{links.realglobe}}})が開発


## これでできること

SUGOSを使うと、あるクライアント上で定義した関数が、他のクライアントからいきなり使えるようになります。

<img src="{{{imgDir}}}/sugos-overview.png"
     alt="Overview"
/>


例えば、関数を提供する側のクライアント（Actor) において、

+ メソッドを持つModuleを宣言 ( `tableTennis#ping` )
+ クライアント名(key)を宣言し、仲介となるhubサーバに接続 ( `my-actor-01@example.sugo-hub.com` )

```javascript
{{{read 'example/simple-actor.js'}}}
```

すると、

関数を提供する側の呼び出す側クライアント (Caller)から、Actorが提供するModuleにアクセスできるようになります。


```javascript
{{{read 'example/simple-caller.js'}}}
```

`.ping()`自体はCaller側のJavascriptではどこにも宣言されていませんが、Actorから受け取った定義を基にして動的に生成されます。

また、一方的な関数呼び出しだけではなく、 Node.jsの[EventEmitter]({{{links.event-emitter}}})を用いたイベント通知もサポートしています。


## これはどういう仕組みか

### 主なコンポネーント

| コンポーネント | 役割 |
| ------------ | --- |
| [SUGO-Hub]({{{links.sugo-hub}}}) | ActorとCallerの通信をとり持つサーバ。内部的には[Socket.IO]({{{links.socket-io}}})と[Koa]({{{links.koa}}})を利用している |
| [SUGO-Actor]({{{links.sugo-actor}}}) | 関数実行を担うクライアント。`key`によって一意に識別される。 |
| [SUGO-Caller]({{{links.sugo-caller}}}) | 関数呼び出しを担うクライアント。接続先のActorに合わせて動的にJavascriptの関数を生成する |


ActorとCallerはそれぞれWebSocketでHubと接続します。


&nbsp;&nbsp;&nbsp;&nbsp;**Caller** **<----->** **Hub** **<----->** **Actor**


Callerは接続時にActorからModuleの定義情報を受け取り、それを元にJavascript関数を動的に生成します。

Caller側で関数を実行すると、関数名や引数などの情報が裏でJSONに変換され、Hubを介して接続先のActorに届きます。
Actor側では受けとった情報を元に対象の関数を呼び出し、その結果をまたCaller側に返します。

それぞれの関数はJavascriptの[async/await](https://github.com/yortus/asyncawait#guide-to-asyncawait-v10)を沿って実装されており、
ネットワークの時差をあまり意識せずにプログラムがかけるようになっています。

## これの利点

+ 機能単位でWebアプリケーション設計が簡単
+ ネットワークをあまり意識しなくていい
+ Javascriptだけで直感的にかける

## これに関するリンク

+ [SUGOS]({{{links.sugos}}})
+ [SUGO-Hub]({{{links.sugo-hub}}})
+ [SUGO-Actor]({{{links.sugo-actor}}})
+ [SUGO-Caller]({{{links.sugo-caller}}})
+ [Realglobe,Inc]({{{links.realglobe}}})
