# 【SUGOS】チュートリアル001: SUGOSことはじめ


### これはなんですか

[SUGOS]({{{links.sugos}}})とは

+ RPC(Remote Procedure Call)フレームワーク
+ モジュール定義を動的に共有することで、ネットワーク透過的な関数呼び出しを実現する
+ 主に[Node.js]({{{links.node}}})で実装されている
+ [EventEmitter]({{{links.eventemitter}}})形式による双方向通信をサポート
+ [株式会社リアルグローブ]({{{links.realglobe}}})が開発


### できること

SUGOSを使うと、あるクライアント上で定義した関数が、他のクライアントからいきなり使えるようになります。

<img src="{{{imgDir}}}/sugos-overview.png"
     alt="Overview"
/>


例えば、宣言側クライアント（Actor) に置いて

+ メソッドを持つモジュールを宣言 ( `tableTennis#ping` )
+ クライアント名(key)を宣言し、hubサーバに接続 ( `my-actor-01@example.sugo-hub.com` )

```javascript
{{{read 'example/simple-actor.js'}}}
```

すると、

同じhubサーバに接続した呼び出し側クライアント (Caller)がActorにアクセスできるようになります。


```javascript
{{{read 'example/simple-caller.js'}}}
```

メソッド呼び出しは基本的にJavascriptの[Promise]({{{links.promise}}})を介して行われ、
ネットワーク越してあることをあまり意識せずに使えるようになっています


また、一方的な関数呼び出しだけではなく、 Node.jsの[EventEmitter]({{{links.event-emitter}}})を用いたイベント通知もサポートしています。



### どういう仕組みか

基本的には[Socket.IO]({{{links.socket-io}}})のラッパーです。

+ 中央サーバである[SUGO-Hub]({{{links.sugo-hub}}})がWebSocket通信で、定義の共有や命令の中継を行なう
+ 提供側クライアントである[SUGO-Actor]({{{links.sugo-actor}}})が、モジュール定義の通知や、命令実行を行なう
+ 実行側クライアントである[SUGO-Caller]({{{links.sugo-actor}}})が、モジュール定義に沿って動的生成や、命令の呼び出しを行なう





