# {{prefix}} {{{cur.name}}}


これはフレームワーク[SUGOS]({{{links.sugos}}})のチュートリアルです。

そんなのいいから取りあえずソースコードを！と言う方は[こちらの実装例]({{{links.tutorial-example}}})を参照。


{{#if toc}}
## {{{tocTitle}}}
{{{toc}}}
{{/if}}


## SUGOSとは

+ 遠隔関数呼び出し（RPC: Remote Procedure Call）を実現するフレームワーク
+ 関数定義を動的に共有することで、ネットワーク越しであることを意識しなくて良くなる
+ 主に[Node.js]({{{links.node}}})で実装されている
+ [EventEmitter]({{{links.event-emitter}}})形式でのイベント駆動な記述も可能
+ [株式会社リアルグローブ]({{{links.realglobe}}})が開発している

<a href="{{{links.sugos}}}">
  <img src="{{{imgDir}}}/sugos-banner.png"
       alt="Banner"
       height="{{bannerHeight}}"
  />
</a>
<a href="{{{links.node}}}">
  <img src="{{{imgDir}}}/nodejs-banner.png"
       alt="banner"
       height="{{bannerHeight}}"
       style="height:{{bannerHeight}}px"
  /></a>
<a href="{{{links.npm}}}">
  <img src="{{{imgDir}}}/npm-banner.png"
       alt="banner"
       height="{{bannerHeight}}"
       style="height:{{bannerHeight}}px"
  /></a>
<a href="{{{links.realglobe}}}">
  <img src="{{{imgDir}}}/realglboe-logo.png"
       alt="banner"
       height="{{bannerHeight}}"
       style="height:{{bannerHeight}}px"
  /></a>


## できること

SUGOSを使うと、あるクライアント上で定義した関数が、他のクライアントからいきなり使えるようになります。
HTTPやWebSocketといった中間のプロトコルを意識することなく、遠隔呼び出しが可能になるのです。

<img src="{{{imgDir}}}/sugos-overview.png"
     alt="Overview"
/>


例えば、関数を提供する側のクライアント（Actor) において、

+ メソッドを持つModuleを宣言 ( `tableTennis#ping` )
+ クライアント名(key)を宣言し、仲介となるhubサーバに接続 ( `my-actor-01@example.sugo-hub.com` )

```javascript
{{{read 'example/simple-actor.js'}}}
```

すると、

関数を呼び出す側クライアント (Caller)から、Actorが提供するModuleにアクセスできるようになります。


```javascript
{{{read 'example/simple-caller.js'}}}
```

`.ping()`自体はCaller側のJavascriptではどこにも宣言されていませんが、Actorから受け取った定義を基にして動的に生成されます。

また、一方的な関数呼び出しだけではなく、 Node.jsの[EventEmitter]({{{links.event-emitter}}})を用いたイベント駆動もサポートしています。
`.on()`や`.emit()`となどの書き方で、Actor側からCaller側に通知が出せます。


## どういう仕組みか

### 主なコンポネーント

| コンポーネント | 役割 |
| ------------ | --- |
| [SUGO-Hub]({{{links.sugo-hub}}}) | ActorとCallerの通信をとり持つサーバ。内部的には[Socket.IO]({{{links.socket-io}}})と[Koa]({{{links.koa}}})を利用している |
| [SUGO-Actor]({{{links.sugo-actor}}}) | 関数実行を担うクライアント。`key`によって一意に識別される。 |
| [SUGO-Caller]({{{links.sugo-caller}}}) | 関数呼び出しを担うクライアント。接続先のActorに合わせて動的にJavascriptの関数を生成する |


ActorとCallerはそれぞれWebSocketでHubと接続します。


&nbsp;&nbsp;&nbsp;&nbsp;**Caller** **<----->** **Hub** **<----->** **Actor**


Callerは接続時にActorからModuleの定義情報を受け取り、それを元にJavascript関数を動的に生成します。

Caller側で関数を実行すると、関数名や引数などの情報が裏でJSONに変換され、Hubを介して接続先のActorに届きます。
Actor側では受けとった情報を元に対象の関数を呼び出し、その結果をまたCaller側に返します。

それぞれの関数はJavascriptの[async/await](https://github.com/yortus/asyncawait#guide-to-asyncawait-v10)に沿って実装されており、
ネットワークの時差をあまり意識せずにプログラムがかけるようになっています。

## まとめ

+ SUGOSは遠隔呼び出しを実現するフレームワーク
+ あるクライアント側で宣言した関数を別のクライアントから呼べる
+ 呼び出し側のJavascript上では関数が動的に作られる
+ HTTPやWebSocketをほとんど意識なくて良い

## リンク

次回: [{{{next.name}}}]({{{next.url}}})

+ [SUGOS]({{{links.sugos}}})
+ [SUGO-Hub]({{{links.sugo-hub}}})
+ [SUGO-Actor]({{{links.sugo-actor}}})
+ [SUGO-Caller]({{{links.sugo-caller}}})
+ [Realglobe Inc]({{{links.realglobe}}})
+ Tutorials
{{#each markdowns}}
  + [{{{name}}}]({{{url}}})
{{/each}}